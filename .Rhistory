usethis::create_package('.')
setwd('..')
usethis::create_package('anki')
usethis::create_package('.')
traceback()
usethis:::check_package_name
usethis:::valid_package_name
normalizePath('.')
basename(normalizePath('.'))
library(RSQLite)
library(DBI)
mydb <- dbConnect(RSQLite::SQLite(), "~/Downloads/collection.anki2")
mydb
dbGetQuery(mydb, 'SELECT * FROM notes LIMIT 5')
dbGetQuery(mydb, 'SELECT count(*) FROM notes LIMIT 5')
readBin('~/Downloads/Taiwanese_Hokkien__with_links_to_MOE_Dictionary_.apkg', raw(), 10L)
readBin('~/Downloads/Chinese_Sentences_and_audio_spoon_fed.apkg', raw(), 10L)
tmp = tempfile()
fwrite(iris, tmp)
library(data.table)
fwrite(iris, tmp)
zip(tempfile(), tmp)
zip(ztmp <- tempfile(), tmp)
readBin(ztmp, raw(), 10L)
?zip
ztmp
tmp
readBin('~/Downloads/Amino_Acid_Flashcards.apkg', raw(), 10L)
list.files('~/Downloads', pattern = 'zip')
readBin('~/Downloads/00check.zip', raw(), 10L)
readBin('~/Downloads/02-08Aug.zip', raw(), 10L)
readBin('~/Downloads/16-19Sept.zip', raw(), 10L)
readBin('~/Downloads/Taiwanese_Hokkien__with_links_to_MOE_Dictionary_.apkg', raw(), 10L)
readBin('~/Downloads/Taiwanese_Hokkien__with_links_to_MOE_Dictionary_.apkg', raw(), 20L)
readBin('~/Downloads/Chinese_Sentences_and_audio_spoon_fed.apkg', raw(), 20L)
readBin('~/Downloads/16-19Sept.zip', raw(), 10L)
readBin('~/Downloads/16-19Sept.zip', raw(), 20L)
readBin('~/Downloads/00check.zip', raw(), 20L)
readBin('~/Downloads/Amino_Acid_Flashcards.apkg', raw(), 20L)
0x50
as.raw(0x50)
as.raw(c(0x50, 0x4b))
as.raw
raw
deck = '~/Downloads/Taiwanese_Hokkien__with_links_to_MOE_Dictionary_.apkg'
readBin(deck, raw(), 4L)
zip_bits = as.raw(c(0x50, 0x4b, 0x03, 0x04))
all.equal(readBin(deck, raw(), 4L), zip_bits)
tdir = tempdir()
unzip(deck, exdir = tdir)
list.files(tdir)
tdir = file.path(tempdir(), 'anki_db')
unzip(deck, exdir = tdir)
list.files(tdir)
unlink(tdir, recursive = TRUE, force = TRUE)
deck = '~/Downloads/Chinese_Sentences_and_audio_spoon_fed.apkg'
tdir = file.path(tempdir(), 'anki_db')
unzip(deck, exdir = tdir)
list.files(tdir)
options('max.print' = 100000)
list.files(tdir)
list.files(file.path(tdir, 'media'))
readLines(file.path(tdir, '0'))
card_db = dbConnect(SQLite(), file.path(tdir, 'collection.anki2'))
card_db
dbGetQuery(card_db, 'show tables')
dbGetQuery(card_db, '.tables')
dbGetQuery(card_db, 'tables')
dbGetQuery(card_db, '1
2
3
4
5
6
7
SELECT
name
FROM
sqlite_master
WHERE
type ='table' AND
name NOT LIKE 'sqlite_%'')
dbGetQuery(card_db, 'SELECT
name
FROM
sqlite_master
WHERE
type ='table' AND
name NOT LIKE 'sqlite_%'')
dbGetQuery(card_db, "SELECT
name
FROM
sqlite_master
WHERE
type ='table' AND
name NOT LIKE 'sqlite_%'")
dbGetQuery(card_db, 'select * from col')
dbGetQuery(card_db, 'select * from notes')
notes = dbGetQuery(card_db, 'select * from notes')
setDT(notes)
notes
list.files(tdir, pattern = 'tmp1cctcn')
system(paste('grep -r tmp1cctcn', tdir))
media = jsonlite::read_json(file.path(tdir, 'media'))
media
notes
head(media)
table(lengths(media))
which(unlist(media) == 'tmpypdrwl.mp3')
head(unlist(media))
?jsonlite::fromJSON
media = jsonlite::read_json(file.path(tdir, 'media'), flatten = TRUE)
head(media)
which(unlist(media) == 'tmpypdrwl.mp3')
media[[2548]]
names(media)[2548]
notes
dbGetQuery(card_db, "SELECT
name
FROM
sqlite_master
WHERE
type ='table' AND
name NOT LIKE 'sqlite_%'")
dbGetQuery(card_db, 'select * from revlog')
dbGetQuery(card_db, 'select * from graves')
dbGetQuery(card_db, 'select * from cards')
cards = dbGetQuery(card_db, 'select * from cards')
setDT(cards)
cards
cards[due == 1341]
summary(cards)
summary(names(media))
length(unique(names(media)))
length(unique(cards$due))
notes
cards[due == 1341]
names(media)[2548]
cards[due == 1321]
cards[due == 1431]
notes
cards[id == 1419644220828]
cards[id == bit64::as.integer64(1419644220828)]
.POSIXct(1419644212689/1000)
cards[nid == 1419644220828]
cards[nid == bit64::as.integer64(1419644220828)]
cards[ , unique(did)]
cards[ , unique(ord)]
notes
notes[ , tstrsplit(flds, '\037')]
notes[ , c('english', 'pinyin', '中文', 'sound_tag') := tstrsplit(flds, '\037')]
notes[]
notes[ , sound_file := gsub('^\\[sound:(.*)\\]$', '\\1', sound_tag)][]
names(cards)
head(media)
media = data.table(
id = names(media),
file = unlist(media)
)
media
notes[media, on = c('sound_file' = 'file'), media_id := i.id][]
x = notes[1:10, .(中文, sound_tag, sound_file, media_id)]
x
dput(x)
x[ , sound_tag := NULL][]
dput(x)
print(x)
